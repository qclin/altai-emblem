// Title: Rorschach
// Author: FAL
// Date: 18. Nov. 2017
// Made with p5.js v0.5.16
// Generated by TypeScript v2.6.1

/*
  LICENCE:
    The font "Bellefair-Regular.ttf" ( https://github.com/shinntype/bellefair ) is
    licensed under the SIL Open Font License, Version 1.1 ( http://scripts.sil.org/OFL ).
*/


"use strict";


// ------------ Rorschach shape ------------------------------
//
/// <reference path="../../../my_types/p5/p5.global-mode.d.ts" />
/// <reference path="Sprite.ts" />
class RorschachShape {
    constructor(params) {
        this.shapeSize = params.shapeSize;
        this.noiseMagnitudeFactor = params.noiseMagnitudeFactor;
        this.centerPosition = createVector();
        this.rotationAngle = 0;
        this.vertexCount = params.vertexCount || Math.floor(0.75 * params.shapeSize);
        this.noiseDistanceScale = params.noiseDistanceScale || params.shapeSize / 320;
        this.noiseTimeScale = params.noiseTimeScale || 0.005;
        this.xNoiseParameterOffset
            = createVector(Math.random(), Math.random()).mult(1024);
        this.yNoiseParameterOffset
            = createVector(Math.random(), Math.random()).mult(1024);
        this.noiseTime = 0;
        this.reachedEndOfScreen = false;
        if (RorschachShape.isNotInitialized)
            RorschachShape.initializeStatic();
    }
    static initializeStatic() {
        this.temporalVector = createVector();
        this.isNotInitialized = false;
    }
    step() {
        this.noiseTime += this.noiseTimeScale;
    }
    draw() {
        if (this.reachedEndOfScreen)
            return;
        translate(this.centerPosition.x, this.centerPosition.y);
        rotate(this.rotationAngle);
        this.drawVertices(+1);
        this.drawVertices(-1);
        rotate(-this.rotationAngle);
        translate(-this.centerPosition.x, -this.centerPosition.y);
    }
    drawVertices(yScaleFactor) {
        const noiseMagnitude = this.noiseMagnitudeFactor * 0.5 * this.shapeSize;
        beginShape();
        let currentBasePositionX = -0.5 * this.shapeSize;
        const basePositionIntervalDistance = this.shapeSize / this.vertexCount;
        const progressRatio = frameCounter.getProgressRatio();
        for (let i = 0; i < this.vertexCount; i += 1) {
            const distanceFactor = progressRatio * sq(sin((i / this.vertexCount) * PI));
            const noiseX = (2 * noise(this.xNoiseParameterOffset.x + this.noiseDistanceScale * currentBasePositionX, this.xNoiseParameterOffset.y + this.noiseTime) - 1) * noiseMagnitude;
            const noiseY = (2 * noise(this.yNoiseParameterOffset.x + this.noiseDistanceScale * currentBasePositionX, this.yNoiseParameterOffset.y + this.noiseTime) - 1) * noiseMagnitude;
            const vertexPositionX = currentBasePositionX + distanceFactor * noiseX;
            const vertexPositionY = yScaleFactor * distanceFactor * (0.3 * this.shapeSize + noiseY);
            vertex(vertexPositionX, vertexPositionY);
            const rotatedVertexPosition = RorschachShape.temporalVector;
            rotatedVertexPosition.set(vertexPositionX, vertexPositionY);
            rotatedVertexPosition.rotate(this.rotationAngle);
            this.checkScreen(this.centerPosition.x + rotatedVertexPosition.x, this.centerPosition.y + rotatedVertexPosition.y);
            currentBasePositionX += basePositionIntervalDistance;
        }
        endShape();
    }
    checkScreen(absolutePositionX, absolutePositionY) {
        const xMargin = 0.01 * width;
        const yMargin = 0.05 * height;
        if (absolutePositionX < xMargin || absolutePositionX > width - xMargin ||
            absolutePositionY < yMargin || absolutePositionY > height - yMargin) {
            this.reachedEndOfScreen = true;
        }
    }
}
RorschachShape.isNotInitialized = true;

//
/// <reference path="../../../my_types/p5/p5.global-mode.d.ts" />
/// <reference path="ShapeColor.ts" />

/// <reference path="common/RorschachShape.ts" />
/// <reference path="common/ShapeColor.ts" />
/// <reference path="common/Sprite.ts" />
/// <reference path="common/FrameCounter.ts" />
/// <reference path="common/SignatureFunction.ts" />
//
